import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import React, { useEffect, useRef } from "react";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import * as THREE from "three";
import data from "../public/data/0000.bin.json";
import data2 from "../public/data/0001.bin.json";
import data3 from "../public/data/0002.bin.json";
import data4 from "../public/data/0003.bin.json";
import data5 from "../public/data/0004.bin.json";
import data6 from "../public/data/0005.bin.json";
import data7 from "../public/data/0006.bin.json";
import data8 from "../public/data/0007.bin.json";

// TODO: Import data from JSON file
// TODO: Display Data as Points in 3D Space
// TODO: Gui Controls for Camera
// TODO: Boxes Surrounding Labels

export default function Home() {
  const canvasRef = useRef(null);

  // data.data.forEach((element) => {
  //   points.push(new THREE.Point());
  //   console.log(points[-1]);
  //   points[-1].position.set(element[0], element[1], element[2]);
  // });

  useEffect(() => {
    // Create a Three.js scene
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });
    renderer.setSize(window.innerWidth, window.innerHeight);

    // Create OrbitControls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true; // Add damping to make controls smoother
    controls.dampingFactor = 0.05;
    controls.screenSpacePanning = false;
    controls.minDistance = 1;
    controls.maxDistance = 500;

    const buildPointsArray = [
      ...data.data,
      ...data2.data,
      ...data3.data,
      ...data4.data,
      ...data5.data,
      ...data6.data,
      ...data7.data,
      ...data8.data,
    ];

    const pointPositions = [];
    // Add points to the scene
    buildPointsArray.forEach((point) => {
      pointPositions.push([point[0], point[1], point[2]]);
    });

    // Create a buffer geometry to hold the positions
    const pointGeometry = new THREE.BufferGeometry();

    // Convert the positions to Float32Array and add them to the geometry
    const positionArray = new Float32Array(pointPositions.flat());
    pointGeometry.setAttribute(
      "position",
      new THREE.BufferAttribute(positionArray, 3)
    );

    // Create a points object with the geometry and material
    const points = new THREE.Points(
      pointGeometry,
      new THREE.PointsMaterial({
        size: 0.1,
        color: "blue",
      })
    );

    // Add the points to the scene
    scene.add(points);

    // Add a cube to the scene
    const geometry = new THREE.BoxGeometry();
    const material = new THREE.MeshPhongMaterial({ color: 0x00ff00 });
    const cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    // Add a point light to the scene
    const pointLight = new THREE.PointLight(0xffffff, 10, 100);
    pointLight.position.set(10, 10, 10);
    scene.add(pointLight);

    // Add an ambient light to the scene
    const ambientLight = new THREE.AmbientLight(0x404040); // soft white light
    scene.add(ambientLight);

    // Add controls to camera
    camera.position.set(0, 0, 5);
    controls.update();

    // Animate the cube
    const animate = function () {
      requestAnimationFrame(animate);
      // cube.rotation.x += 0.01;
      // cube.rotation.y += 0.01;

      // Update controls
      controls.update();

      // Render the scene
      renderer.render(scene, camera);
    };
    animate();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <canvas className={styles.canvas} ref={canvasRef} />
      </main>
    </>
  );
}
